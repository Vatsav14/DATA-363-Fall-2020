knitr::opts_chunk$set(echo = TRUE)
# How to define a function in R
# function_name <- function(x) {define function here, return function value}
gx <- function(x) {
gx <- (sin(exp(sqrt(x))-1))^-1
return(gx)
}
integrate(gx,lower=0,upper=9/16)
curve(gx,from=0,to=9/16,xlab="x",ylab="g(x)",n=401,ylim=c(0,25))
# Write code to define your simple Monte Carlo function
simple_MC_gx <- function(n) {
xs <- runif(n, 0, 9/16)
simple_MC_gx <- (9/16)*mean(gx(xs))
return(simple_MC_gx)
}
# empty vector for simulation results
int_gx_simple240 <- rep(0,1000)
for (k in 1:1000)
{
# with each loop we use your function above to find the simple
# MC simulation with n = 240 random variables
int_gx_simple240[k] <- simple_MC_gx(240)
}
mean(int_gx_simple240)
sd(int_gx_simple240)
# Write code to define your simple Monte Carlo function
simple_MC_gx <- function(n) {
xs <- runif(n, 0, 9/16)
simple_MC_gx <- (9/16)*mean(gx(xs))
return(simple_MC_gx)
}
# empty vector for simulation results
int_gx_simple240 <- rep(0,1000)
for (k in 1:1000)
{
# with each loop we use your function above to find the simple
# MC simulation with n = 240 random variables
int_gx_simple240[k] <- simple_MC_gx(240)
}
mean(int_gx_simple240)
sd(int_gx_simple240)
# Write code to define your Monte Carlo with Importance Sampling function
importance_MC_gx <- function(n) {
# u is a vector of probabilities that you apply your probability transform to
u <- runif(240, 0, 1)
# xs is a vector of RVs distributed according to your density function
# which you get from applying the probability transform to u
xs <- (9/16)*u^2
# importance_MC_gx is your definite integral estimate from MC with importance
# sampling
importance_MC_gx <- mean((3/2) * sqrt(xs) * gx(xs)) # replace the 0 with your expression
}
int_gx_importance240 <- rep(0,1000)
for (k in 1:1000)
{
int_gx_importance240[k] <- importance_MC_gx(240)
}
mean(int_gx_importance240)
sd(int_gx_importance240)
sd(int_gx_simple240)/sd(int_gx_importance240)
# Write code to define your Monte Carlo with Importance Sampling function
importance_MC_gx <- function(n) {
# u is a vector of probabilities that you apply your probability transform to
u <- runif(240, 0, 1)
# xs is a vector of RVs distributed according to your density function
# which you get from applying the probability transform to u
xs <- (9/16)*u^2
# importance_MC_gx is your definite integral estimate from MC with importance
# sampling
importance_MC_gx <- mean((3/2) * sqrt(xs) * gx(xs)) # replace the 0 with your expression
}
int_gx_importance240 <- rep(0,1000)
for (k in 1:1000)
{
int_gx_importance240[k] <- importance_MC_gx(240)
}
mean(int_gx_importance240)
sd(int_gx_importance240)
sd(int_gx_simple240)/sd(int_gx_importance240)
knitr::opts_chunk$set(echo = TRUE)
# How to define a function in R
# function_name <- function(x) {define function here, return function value}
gx <- function(x) {
gx <- (sin(exp(sqrt(x))-1))^-1
return(gx)
}
integrate(gx,lower=0,upper=9/16)
curve(gx,from=0,to=9/16,xlab="x",ylab="g(x)",n=401,ylim=c(0,25))
# Write code to define your simple Monte Carlo function
simple_MC_gx <- function(n) {
xs <- runif(n, 0, 9/16)
simple_MC_gx <- (9/16)*mean(gx(xs))
return(simple_MC_gx)
}
# empty vector for simulation results
int_gx_simple240 <- rep(0,1000)
for (k in 1:1000)
{
# with each loop we use your function above to find the simple
# MC simulation with n = 240 random variables
int_gx_simple240[k] <- simple_MC_gx(240)
}
mean(int_gx_simple240)
sd(int_gx_simple240)
# Write code to define your Monte Carlo with Importance Sampling function
importance_MC_gx <- function(n) {
# u is a vector of probabilities that you apply your probability transform to
u <- runif(240, 0, 1)
# xs is a vector of RVs distributed according to your density function
# which you get from applying the probability transform to u
xs <- (9/16)*u^2
# importance_MC_gx is your definite integral estimate from MC with importance
# sampling
importance_MC_gx <- mean((3/2) * sqrt(xs) * gx(xs)) # replace the 0 with your expression
}
int_gx_importance240 <- rep(0,1000)
for (k in 1:1000)
{
int_gx_importance240[k] <- importance_MC_gx(240)
}
mean(int_gx_importance240)
sd(int_gx_importance240)
sd(int_gx_simple240)/sd(int_gx_importance240)
