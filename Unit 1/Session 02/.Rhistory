knitr::opts_chunk$set(echo = TRUE)
# this command reads in a comma-separated-values file at the following url
# and stores it in a variable called mosquitoes
mosquitoes<-read.csv("http://math.arizona.edu/~jwatkins/mosquitoes.csv")
# you can also read in a local file by identifying the path to the file
# Hint:  use the summary() function on the mosquitoes data frame
summary(mosquitoes)
# Hint:  use the boxplot() function on the mosquitoes data frame
# set the parameter ylab = "lifespan in days"
boxplot(mosquitoes, ylab = "lifespan in days")
# na.omit(vector) provides a copy of the vector with the NAs removed
# we'll work with the data in vectors to avoid the issue of there
# being a different number of wildtype samples than transgenic samples
wildtype <- na.omit(mosquitoes$wildtype)
transgenic <- mosquitoes$transgenic
#Hint: What proportion of mosquitoes survive to a particular age?
# For an empirical CDF of a variable the x-values are the sorted
# values and the y-values should be equispaced between 0 and 1,
# the example code for y_wild shows one way to do this using
# the length() function.  So 1:10/10 = [0.1 0.2 ... 1.0]
# and 1:N/N = [1/N 2/N ... N/N]
x_wild <- sort(mosquitoes$wildtype,decreasing=TRUE)
y_wild <- (1:length(x_wild))/length(x_wild)
x_trans <- sort(mosquitoes$transgenic,decreasing=TRUE)
y_trans <- (1:length(x_trans))/length(x_trans)
# The following shows how to overlay two plots:
plot(x_wild,y_wild,xlim=c(0,55),ylim=c(0,1),
xlab="days survived",ylab="cumulative fraction", type="s",col="blue")
# par() sets graphical parameters, new = TRUE tells R to dump the next
# plot on top of the first
par(new=TRUE)
# When overlaying plots make sure that xlim and ylim (the graph axes) are
# the same as well as xlab and ylab (the graph labels)
plot(x_trans,y_trans,xlim=c(0,55),ylim=c(0,1),
xlab="days survived",ylab="cumulative fraction", type="s",col="red")
# We'll include a legend so the reader knows which line is which
legend("topright",legend=c("wildtype","transgenic"),col=c("blue","red"))
# notice that we made the plot square by setting fig.width and fig.height in
# the options for the chunk
XXX = wildtype data, YYY = transgenic data
# notice that we made the plot square by setting fig.width and fig.height in
# the options for the chunk
XXX = wildtype
YYY = transgenic
qqplot(XXX,YYY,type="s")
abline(a=0,b=1) # plot y = x
#Hint: Think back to part (a) to find the quartiles to plot.
XXX = c(x1,x2,x3) #are the 3 quartiles for wildtype
# notice that we made the plot square by setting fig.width and fig.height in
# the options for the chunk
XXX = wildtype
YYY = transgenic
qqplot(XXX,YYY,type="s")
abline(a=0,b=1) # plot y = x
#Hint: Think back to part (a) to find the quartiles to plot.
XXX = c(11.000,18.000,24.000) #are the 3 quartiles for wildtype
YYY = c(9.50,16.000,22.000) #are the 3 quartiles for transgenic
# pch sets the character type to plot
# bg sets the color of the points to red
points(XXX,YYY,pch = 21,bg = "red")
# na.omit(vector) provides a copy of the vector with the NAs removed
# we'll work with the data in vectors to avoid the issue of there
# being a different number of wildtype samples than transgenic samples
wildtype <- na.omit(mosquitoes$wildtype)
transgenic <- mosquitoes$transgenic
#Hint: What proportion of mosquitoes survive to a particular age?
# For an empirical CDF of a variable the x-values are the sorted
# values and the y-values should be equispaced between 0 and 1,
# the example code for y_wild shows one way to do this using
# the length() function.  So 1:10/10 = [0.1 0.2 ... 1.0]
# and 1:N/N = [1/N 2/N ... N/N]
x_wild <- sort(mosquitoes$wildtype,decreasing=TRUE)
y_wild <- (1:length(x_wild))/length(x_wild)
x_trans <- sort(mosquitoes$transgenic,decreasing=TRUE)
y_trans <- (1:length(x_trans))/length(x_trans)
# The following shows how to overlay two plots:
plot(x_wild,y_wild,xlim=c(0,55),ylim=c(0,1),
xlab="days survived",ylab="cumulative fraction", type="s",col="blue")
# par() sets graphical parameters, new = TRUE tells R to dump the next
# plot on top of the first
par(new=TRUE)
# When overlaying plots make sure that xlim and ylim (the graph axes) are
# the same as well as xlab and ylab (the graph labels)
plot(x_trans,y_trans,xlim=c(0,55),ylim=c(0,1),
xlab="days survived",ylab="cumulative fraction", type="s",col="red")
# We'll include a legend so the reader knows which line is which
legend("topright",legend=c("wildtype","transgenic"),col=c("blue","red"))
# na.omit(vector) provides a copy of the vector with the NAs removed
# we'll work with the data in vectors to avoid the issue of there
# being a different number of wildtype samples than transgenic samples
wildtype <- na.omit(mosquitoes$wildtype)
transgenic <- mosquitoes$transgenic
#Hint: What proportion of mosquitoes survive to a particular age?
# For an empirical CDF of a variable the x-values are the sorted
# values and the y-values should be equispaced between 0 and 1,
# the example code for y_wild shows one way to do this using
# the length() function.  So 1:10/10 = [0.1 0.2 ... 1.0]
# and 1:N/N = [1/N 2/N ... N/N]
x_wild <- sort(mosquitoes$wildtype,decreasing=TRUE)
y_wild <- (1:length(x_wild))/length(x_wild)
x_trans <- sort(mosquitoes$transgenic,decreasing=TRUE)
y_trans <- (1:length(x_trans))/length(x_trans)
# The following shows how to overlay two plots:
plot(x_wild,y_wild,xlim=c(0,55),ylim=c(0,1),
xlab="days survived",ylab="cumulative fraction", type="s",beb="blue")
# par() sets graphical parameters, new = TRUE tells R to dump the next
# plot on top of the first
par(new=TRUE)
# When overlaying plots make sure that xlim and ylim (the graph axes) are
# the same as well as xlab and ylab (the graph labels)
plot(x_trans,y_trans,xlim=c(0,55),ylim=c(0,1),
xlab="days survived",ylab="cumulative fraction", type="s",beb="red")
# We'll include a legend so the reader knows which line is which
legend("topright",legend=c("wildtype","transgenic"),col=c("blue","red"))
knitr::opts_chunk$set(echo = TRUE)
# this command reads in a comma-separated-values file at the following url
# and stores it in a variable called mosquitoes
mosquitoes<-read.csv("http://math.arizona.edu/~jwatkins/mosquitoes.csv")
# you can also read in a local file by identifying the path to the file
# Hint:  use the summary() function on the mosquitoes data frame
summary(mosquitoes)
# Hint:  use the boxplot() function on the mosquitoes data frame
# set the parameter ylab = "lifespan in days"
boxplot(mosquitoes, ylab = "lifespan in days")
# na.omit(vector) provides a copy of the vector with the NAs removed
# we'll work with the data in vectors to avoid the issue of there
# being a different number of wildtype samples than transgenic samples
wildtype <- na.omit(mosquitoes$wildtype)
transgenic <- mosquitoes$transgenic
#Hint: What proportion of mosquitoes survive to a particular age?
# For an empirical CDF of a variable the x-values are the sorted
# values and the y-values should be equispaced between 0 and 1,
# the example code for y_wild shows one way to do this using
# the length() function.  So 1:10/10 = [0.1 0.2 ... 1.0]
# and 1:N/N = [1/N 2/N ... N/N]
x_wild <- sort(mosquitoes$wildtype,decreasing=TRUE)
y_wild <- (1:length(x_wild))/length(x_wild)
x_trans <- sort(mosquitoes$transgenic,decreasing=TRUE)
y_trans <- (1:length(x_trans))/length(x_trans)
# The following shows how to overlay two plots:
plot(x_wild,y_wild,xlim=c(0,55),ylim=c(0,1),
xlab="days survived",ylab="cumulative fraction", type="s",col="blue")
# par() sets graphical parameters, new = TRUE tells R to dump the next
# plot on top of the first
par(new=TRUE)
# When overlaying plots make sure that xlim and ylim (the graph axes) are
# the same as well as xlab and ylab (the graph labels)
plot(x_trans,y_trans,xlim=c(0,55),ylim=c(0,1),
xlab="days survived",ylab="cumulative fraction", type="s",col="red")
# We'll include a legend so the reader knows which line is which
legend("topright",legend=c("wildtype","transgenic"),col=c("blue","red"))
# notice that we made the plot square by setting fig.width and fig.height in
# the options for the chunk
XXX = wildtype
YYY = transgenic
qqplot(XXX,YYY,type="s")
abline(a=0,b=1) # plot y = x
#Hint: Think back to part (a) to find the quartiles to plot.
XXX = c(11.000,18.000,24.000) #are the 3 quartiles for wildtype
YYY = c(9.50,16.000,22.000) #are the 3 quartiles for transgenic
# pch sets the character type to plot
# bg sets the color of the points to red
points(XXX,YYY,pch = 21,bg = "red")
# na.omit(vector) provides a copy of the vector with the NAs removed
# we'll work with the data in vectors to avoid the issue of there
# being a different number of wildtype samples than transgenic samples
wildtype <- na.omit(mosquitoes$wildtype)
transgenic <- mosquitoes$transgenic
#Hint: What proportion of mosquitoes survive to a particular age?
# For an empirical CDF of a variable the x-values are the sorted
# values and the y-values should be equispaced between 0 and 1,
# the example code for y_wild shows one way to do this using
# the length() function.  So 1:10/10 = [0.1 0.2 ... 1.0]
# and 1:N/N = [1/N 2/N ... N/N]
x_wild <- sort(mosquitoes$wildtype,decreasing=TRUE)
y_wild <- (1:length(x_wild))/length(x_wild)
x_trans <- sort(mosquitoes$transgenic,decreasing=TRUE)
y_trans <- (1:length(x_trans))/length(x_trans)
# The following shows how to overlay two plots:
plot(x_wild,y_wild,xlim=c(0,55),ylim=c(0,1),
xlab="days survived",ylab="cumulative fraction", type="s",col="blue")
# par() sets graphical parameters, new = TRUE tells R to dump the next
# plot on top of the first
par(new=TRUE)
# When overlaying plots make sure that xlim and ylim (the graph axes) are
# the same as well as xlab and ylab (the graph labels)
plot(x_trans,y_trans,xlim=c(0,55),ylim=c(0,1),
xlab="days survived",ylab="cumulative fraction", type="s",col="red")
# We'll include a legend so the reader knows which line is which
legend("topright",legend=c("wildtype","transgenic"),beb=c("blue","red"))
# na.omit(vector) provides a copy of the vector with the NAs removed
# we'll work with the data in vectors to avoid the issue of there
# being a different number of wildtype samples than transgenic samples
wildtype <- na.omit(mosquitoes$wildtype)
transgenic <- mosquitoes$transgenic
#Hint: What proportion of mosquitoes survive to a particular age?
# For an empirical CDF of a variable the x-values are the sorted
# values and the y-values should be equispaced between 0 and 1,
# the example code for y_wild shows one way to do this using
# the length() function.  So 1:10/10 = [0.1 0.2 ... 1.0]
# and 1:N/N = [1/N 2/N ... N/N]
x_wild <- sort(mosquitoes$wildtype,decreasing=TRUE)
y_wild <- (1:length(x_wild))/length(x_wild)
x_trans <- sort(mosquitoes$transgenic,decreasing=TRUE)
y_trans <- (1:length(x_trans))/length(x_trans)
# The following shows how to overlay two plots:
plot(x_wild,y_wild,xlim=c(0,55),ylim=c(0,1),
xlab="days survived",ylab="cumulative fraction", type="s",col="blue")
# par() sets graphical parameters, new = TRUE tells R to dump the next
# plot on top of the first
par(new=TRUE)
# When overlaying plots make sure that xlim and ylim (the graph axes) are
# the same as well as xlab and ylab (the graph labels)
plot(x_trans,y_trans,xlim=c(0,55),ylim=c(0,1),
xlab="days survived",ylab="cumulative fraction", type="s",col="red")
# We'll include a legend so the reader knows which line is which
legend("topright",legend=c("wildtype","transgenic"),col=c("blue","red"))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# this command reads in a comma-separated-values file at the following url
# and stores it in a variable called mosquitoes
mosquitoes<-read.csv("http://math.arizona.edu/~jwatkins/mosquitoes.csv")
# you can also read in a local file by identifying the path to the file
# Hint:  use the summary() function on the mosquitoes data frame
summary(mosquitoes)
# Hint:  use the boxplot() function on the mosquitoes data frame
# set the parameter ylab = "lifespan in days"
boxplot(mosquitoes, ylab = "lifespan in days")
# na.omit(vector) provides a copy of the vector with the NAs removed
# we'll work with the data in vectors to avoid the issue of there
# being a different number of wildtype samples than transgenic samples
wildtype <- na.omit(mosquitoes$wildtype)
transgenic <- mosquitoes$transgenic
#Hint: What proportion of mosquitoes survive to a particular age?
# For an empirical CDF of a variable the x-values are the sorted
# values and the y-values should be equispaced between 0 and 1,
# the example code for y_wild shows one way to do this using
# the length() function.  So 1:10/10 = [0.1 0.2 ... 1.0]
# and 1:N/N = [1/N 2/N ... N/N]
x_wild <- sort(mosquitoes$wildtype,decreasing=TRUE)
y_wild <- (1:length(x_wild))/length(x_wild)
x_trans <- sort(mosquitoes$transgenic,decreasing=TRUE)
y_trans <- (1:length(x_trans))/length(x_trans)
# The following shows how to overlay two plots:
plot(x_wild,y_wild,xlim=c(0,55),ylim=c(0,1),
xlab="days survived",ylab="cumulative fraction", type="s",col="blue")
# par() sets graphical parameters, new = TRUE tells R to dump the next
# plot on top of the first
par(new=TRUE)
# When overlaying plots make sure that xlim and ylim (the graph axes) are
# the same as well as xlab and ylab (the graph labels)
plot(x_trans,y_trans,xlim=c(0,55),ylim=c(0,1),
xlab="days survived",ylab="cumulative fraction", type="s",col="red")
# We'll include a legend so the reader knows which line is which
legend("topright",legend=c("wildtype","transgenic"),col=c("blue","red"))
# notice that we made the plot square by setting fig.width and fig.height in
# the options for the chunk
XXX = wildtype
YYY = transgenic
qqplot(XXX,YYY,type="s")
abline(a=0,b=1) # plot y = x
#Hint: Think back to part (a) to find the quartiles to plot.
XXX = c(11.000,18.000,24.000) #are the 3 quartiles for wildtype
YYY = c(9.50,16.000,22.000) #are the 3 quartiles for transgenic
# pch sets the character type to plot
# bg sets the color of the points to red
points(XXX,YYY,pch = 21,bg = "red")
unlink('b-worksheet-F2020_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# this command reads in a comma-separated-values file at the following url
# and stores it in a variable called mosquitoes
mosquitoes<-read.csv("http://math.arizona.edu/~jwatkins/mosquitoes.csv")
# you can also read in a local file by identifying the path to the file
# Hint:  use the summary() function on the mosquitoes data frame
summary(mosquitoes)
# Hint:  use the boxplot() function on the mosquitoes data frame
# set the parameter ylab = "lifespan in days"
boxplot(mosquitoes, ylab = "lifespan in days")
# na.omit(vector) provides a copy of the vector with the NAs removed
# we'll work with the data in vectors to avoid the issue of there
# being a different number of wildtype samples than transgenic samples
wildtype <- na.omit(mosquitoes$wildtype)
transgenic <- mosquitoes$transgenic
#Hint: What proportion of mosquitoes survive to a particular age?
# For an empirical CDF of a variable the x-values are the sorted
# values and the y-values should be equispaced between 0 and 1,
# the example code for y_wild shows one way to do this using
# the length() function.  So 1:10/10 = [0.1 0.2 ... 1.0]
# and 1:N/N = [1/N 2/N ... N/N]
x_wild <- sort(mosquitoes$wildtype,decreasing=TRUE)
y_wild <- (1:length(x_wild))/length(x_wild)
x_trans <- sort(mosquitoes$transgenic,decreasing=TRUE)
y_trans <- (1:length(x_trans))/length(x_trans)
# The following shows how to overlay two plots:
plot(x_wild,y_wild,xlim=c(0,55),ylim=c(0,1),
xlab="days survived",ylab="cumulative fraction", type="s",col="blue")
# par() sets graphical parameters, new = TRUE tells R to dump the next
# plot on top of the first
par(new=TRUE)
# When overlaying plots make sure that xlim and ylim (the graph axes) are
# the same as well as xlab and ylab (the graph labels)
plot(x_trans,y_trans,xlim=c(0,55),ylim=c(0,1),
xlab="days survived",ylab="cumulative fraction", type="s",col="red")
# We'll include a legend so the reader knows which line is which
legend("topright",legend=c("wildtype","transgenic"),col=c("blue","red"))
# notice that we made the plot square by setting fig.width and fig.height in
# the options for the chunk
XXX = wildtype
YYY = transgenic
qqplot(XXX,YYY,type="s")
abline(a=0,b=1) # plot y = x
#Hint: Think back to part (a) to find the quartiles to plot.
XXX = c(11.000,18.000,24.000) #are the 3 quartiles for wildtype
YYY = c(9.50,16.000,22.000) #are the 3 quartiles for transgenic
# pch sets the character type to plot
# bg sets the color of the points to red
points(XXX,YYY,pch = 21,bg = "red")
Sys.which('pdflatex')
Sys.which('xelatex')
tinytex::install_tinytex()
Sys.which('pdflatex')
knitr::opts_chunk$set(echo = TRUE)
# this command reads in a comma-separated-values file at the following url
# and stores it in a variable called mosquitoes
mosquitoes<-read.csv("http://math.arizona.edu/~jwatkins/mosquitoes.csv")
# you can also read in a local file by identifying the path to the file
# Hint:  use the summary() function on the mosquitoes data frame
summary(mosquitoes)
# Hint:  use the boxplot() function on the mosquitoes data frame
# set the parameter ylab = "lifespan in days"
boxplot(mosquitoes, ylab = "lifespan in days")
# na.omit(vector) provides a copy of the vector with the NAs removed
# we'll work with the data in vectors to avoid the issue of there
# being a different number of wildtype samples than transgenic samples
wildtype <- na.omit(mosquitoes$wildtype)
transgenic <- mosquitoes$transgenic
#Hint: What proportion of mosquitoes survive to a particular age?
# For an empirical CDF of a variable the x-values are the sorted
# values and the y-values should be equispaced between 0 and 1,
# the example code for y_wild shows one way to do this using
# the length() function.  So 1:10/10 = [0.1 0.2 ... 1.0]
# and 1:N/N = [1/N 2/N ... N/N]
x_wild <- sort(mosquitoes$wildtype,decreasing=TRUE)
y_wild <- (1:length(x_wild))/length(x_wild)
x_trans <- sort(mosquitoes$transgenic,decreasing=TRUE)
y_trans <- (1:length(x_trans))/length(x_trans)
# The following shows how to overlay two plots:
plot(x_wild,y_wild,xlim=c(0,55),ylim=c(0,1),
xlab="days survived",ylab="cumulative fraction", type="s",col="blue")
# par() sets graphical parameters, new = TRUE tells R to dump the next
# plot on top of the first
par(new=TRUE)
# When overlaying plots make sure that xlim and ylim (the graph axes) are
# the same as well as xlab and ylab (the graph labels)
plot(x_trans,y_trans,xlim=c(0,55),ylim=c(0,1),
xlab="days survived",ylab="cumulative fraction", type="s",col="red")
# We'll include a legend so the reader knows which line is which
legend("topright",legend=c("wildtype","transgenic"),col=c("blue","red"))
# notice that we made the plot square by setting fig.width and fig.height in
# the options for the chunk
XXX = wildtype
YYY = transgenic
qqplot(XXX,YYY,type="s")
abline(a=0,b=1) # plot y = x
#Hint: Think back to part (a) to find the quartiles to plot.
XXX = c(11.000,18.000,24.000) #are the 3 quartiles for wildtype
YYY = c(9.50,16.000,22.000) #are the 3 quartiles for transgenic
# pch sets the character type to plot
# bg sets the color of the points to red
points(XXX,YYY,pch = 21,bg = "red")
