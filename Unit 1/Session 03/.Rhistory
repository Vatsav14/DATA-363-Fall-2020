# Write out data in temporary vectors/lists
mon <- c("Oct","Nov","Dec","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep")
heating_degree_days <- c(163,228,343,373,301,238,137,84,38,15,14,34)
usage <- c(593,676,1335,1149,1127,892,538,289,172,131,134,134)
# Store it in a data frame
heating_data <- data.frame(month = mon, hdd = heating_degree_days, kWh = usage)
# Clean up the temporary variables
rm(heating_degree_days,usage,mon)
# summary(dataframe) gives a summary of each column of the data frame
summary(heating_data)
# Usage for plot is plot(x,y,xlab = "",ylab = "")
# To access vectors from your data set use
#   heating_data$hdd and heating_data$kWh
# set parameters xlab = "", ylab = "" to have nice labels
# uncomment the lines below and fill in the blanks
# plot(x = XXX,
#      y = XXX,
#      xlab = "XXX",
#      ylab = "XXX")
# lm(formula,data = dataframe) gives a linear model based on data
# An example formula might be y ~ x
# (R uses a tilda instead of an equals sign for formulas)
# You'll have to write it in terms of our variables
# the variable heating.lm will contain your linear model
# heating.lm <- lm(FILL IN THE FORMULA,data = heating_data)
# summary() can also accept a model as an input
# summary(heating.lm)
# abline draws a line of the form y = a + bx
# abline can also accept an model of that form
# abline(heating.lm)
# predict(linear model, data frame with new place to evaluate)
# you'll have to work out what number to replace XXX with
# predict(heating.lm,newdata = data.frame(hdd = XXX))
# put your calculation below either inside the chunk as R code or outside the chunk as text
# put your calculation below either inside the chunk as R code or outside the chunk as text
# cor(x,y) gives the correlation between x & y
# access your variables as heating_data$hdd and heating_data$kWh
# cor(XXX,YYY)
# we'll compute the residuals with the resid function
# heating_data$residual <- resid(heating.lm)
# heating_data
# put your calculation below either inside the chunk as R code or outside the chunk as text
knitr::opts_chunk$set(echo = TRUE)
# Write out data in temporary vectors/lists
mon <- c("Oct","Nov","Dec","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep")
heating_degree_days <- c(163,228,343,373,301,238,137,84,38,15,14,34)
usage <- c(593,676,1335,1149,1127,892,538,289,172,131,134,134)
# Store it in a data frame
heating_data <- data.frame(month = mon, hdd = heating_degree_days, kWh = usage)
# Clean up the temporary variables
rm(heating_degree_days,usage,mon)
# summary(dataframe) gives a summary of each column of the data frame
summary(heating_data)
# uncomment the lines below and fill in the blanks
plot(x = heating_data$hdd,
y = heating_data$kWh,
xlab = "Heating Degree Days",
ylab = "Kilowatt Hours")
# uncomment the lines below and fill in the blanks
plot(x = heating_data$hdd,
y = heating_data$kWh,
xlab = "Heating Degree Days",
ylab = "Kilowatt Hours")
# abline(heating.lm)
# abline(heating.lm)
abline(heating.lm)
summary(heating.lm)
# Usage for plot is plot(x,y,xlab = "",ylab = "")
# To access vectors from your data set use
#   heating_data$hdd and heating_data$kWh
# set parameters xlab = "", ylab = "" to have nice labels
# uncomment the lines below and fill in the blanks
plot(x = heating_data$hdd,
y = heating_data$kWh,
xlab = "Heating Degree Days",
ylab = "Kilowatt Hours")
# lm(formula,data = dataframe) # gives a linear model based on data
# An example formula might be y ~ x
# (R uses a tilda instead of an equals sign for formulas)
# You'll have to write it in terms of our variables
# the variable heating.lm will contain your linear model
heating.lm <- lm(heating_data$kWh ~ heating_data$hdd,data = heating_data)
summary(heating.lm) # can also accept a model as an input
summary(heating.lm)
# abline draws a line of the form y = a + bx
# abline can also accept an model of that form
abline(heating.lm)
# Usage for plot is plot(x,y,xlab = "",ylab = "")
# To access vectors from your data set use
#   heating_data$hdd and heating_data$kWh
# set parameters xlab = "", ylab = "" to have nice labels
# uncomment the lines below and fill in the blanks
plot(x = heating_data$hdd,
y = heating_data$kWh,
xlab = "Heating Degree Days",
ylab = "Kilowatt Hours")
# lm(formula,data = dataframe) # gives a linear model based on data
# An example formula might be y ~ x
# (R uses a tilda instead of an equals sign for formulas)
# You'll have to write it in terms of our variables
# the variable heating.lm will contain your linear model
heating.lm <- lm(heating_data$kWh ~ heating_data$hdd,data = heating_data)
summary(heating.lm) # can also accept a model as an input
summary(heating.lm)
# abline draws a line of the form y = a + bx
# abline can also accept an model of that form
abline(heating.lm)
heating.lm <- lm(kWh ~ hdd,data = heating_data)
# Usage for plot is plot(x,y,xlab = "",ylab = "")
# To access vectors from your data set use
#   heating_data$hdd and heating_data$kWh
# set parameters xlab = "", ylab = "" to have nice labels
# uncomment the lines below and fill in the blanks
plot(x = heating_data$hdd,
y = heating_data$kWh,
xlab = "Heating Degree Days",
ylab = "Kilowatt Hours")
# lm(formula,data = dataframe) # gives a linear model based on data
# An example formula might be y ~ x
# (R uses a tilda instead of an equals sign for formulas)
# You'll have to write it in terms of our variables
# the variable heating.lm will contain your linear model
heating.lm <- lm(kWh ~ hdd,data = heating_data)
summary(heating.lm) # can also accept a model as an input
summary(heating.lm)
# abline draws a line of the form y = a + bx
# abline can also accept an model of that form
abline(heating.lm)
View(heating.lm)
View(heating.lm)
View(heating.lm)
View(heating.lm)
# predict(linear model, data frame with new place to evaluate)
# you'll have to work out what number to replace XXX with
predict(heating.lm,newdata = data.frame(hdd = 15*30))
# put your calculation below either inside the chunk as R code or outside the chunk as text
(kWh = 53.504 + 3.317*450)
# predict(linear model, data frame with new place to evaluate)
# you'll have to work out what number to replace XXX with
predict(heating.lm,newdata = data.frame(hdd = 15*30))
# put your calculation below either inside the chunk as R code or outside the chunk as text
(kWh_450 = 53.504 + 3.317*450)
# put your calculation below either inside the chunk as R code or outside the chunk as text
(hdd_pred = (1150-53.504)/3.317)
knitr::opts_chunk$set(echo = TRUE)
# Write out data in temporary vectors/lists
mon <- c("Oct","Nov","Dec","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep")
heating_degree_days <- c(163,228,343,373,301,238,137,84,38,15,14,34)
usage <- c(593,676,1335,1149,1127,892,538,289,172,131,134,134)
# Store it in a data frame
heating_data <- data.frame(month = mon, hdd = heating_degree_days, kWh = usage)
# Clean up the temporary variables
rm(heating_degree_days,usage,mon)
# summary(dataframe) gives a summary of each column of the data frame
summary(heating_data)
# Usage for plot is plot(x,y,xlab = "",ylab = "")
# To access vectors from your data set use
#   heating_data$hdd and heating_data$kWh
# set parameters xlab = "", ylab = "" to have nice labels
# uncomment the lines below and fill in the blanks
plot(x = heating_data$hdd,
y = heating_data$kWh,
xlab = "Heating Degree Days",
ylab = "Kilowatt Hours")
# lm(formula,data = dataframe) # gives a linear model based on data
# An example formula might be y ~ x
# (R uses a tilda instead of an equals sign for formulas)
# You'll have to write it in terms of our variables
# the variable heating.lm will contain your linear model
heating.lm <- lm(kWh ~ hdd,data = heating_data)
summary(heating.lm) # can also accept a model as an input
summary(heating.lm)
# abline draws a line of the form y = a + bx
# abline can also accept an model of that form
abline(heating.lm)
# predict(linear model, data frame with new place to evaluate)
# you'll have to work out what number to replace XXX with
predict(heating.lm,newdata = data.frame(hdd = 15*30))
# put your calculation below either inside the chunk as R code or outside the chunk as text
(kWh_450 = 53.504 + 3.317*450)
# put your calculation below either inside the chunk as R code or outside the chunk as text
(hdd_pred = (1150-53.504)/3.317)
# cor(x,y) gives the correlation between x & y
# access your variables as heating_data$hdd and heating_data$kWh
# cor(XXX,YYY)
# we'll compute the residuals with the resid function
# heating_data$residual <- resid(heating.lm)
# heating_data
# put your calculation below either inside the chunk as R code or outside the chunk as text
# cor(x,y) gives the correlation between x & y
# access your variables as heating_data$hdd and heating_data$kWh
cor(heating_data$hdd,heating_data$kWh)
# we'll compute the residuals with the resid function
heating_data$residual <- resid(heating.lm)
heating_data
# put your calculation below either inside the chunk as R code or outside the chunk as text
