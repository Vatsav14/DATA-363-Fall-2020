knitr::opts_chunk$set(echo = TRUE)
u1 <- runif(80)
x1 <- -2*log(1-u1) # apply your answer to (b) to u1
# Do either this chunk or the next one.  You're probably more familiar with this
# style and the other chunk is for the adventurous.
plot(sort(x2),      # x-values are sorted version of the data
y,             # y-values equispaced between (0,1]
type = "s",    # produces a stepped line
xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="???",    # fill in your own labels for x- and y-axes
ylab="???",
col="blue")    # sets the color of the line to blue
# copy over your code from above
u2 <- runif(80)
x2 <- -2*log(1-u2) # apply your answer to (b) to u2
# creates 80 equispaced values in (0,1]
y <- 1:length(x1)/length(x1)
# Do either this chunk or the next one.  You're probably more familiar with this
# style and the other chunk is for the adventurous.
plot(sort(x2),      # x-values are sorted version of the data
y,             # y-values equispaced between (0,1]
type = "s",    # produces a stepped line
xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="???",    # fill in your own labels for x- and y-axes
ylab="???",
col="blue")    # sets the color of the line to blue
# par() sets graphics options, new=TRUE tells R to plot on top of the existing plot
# if there is no existing plot then R will be very confused.
par(new=TRUE)
# For second plot use same values for xlim, ylim, xlab, and ylab.  Change col
# to a different value like "red"
#plot(sort(x2),y,type = "s",PARAMETERS FROM ABOVE PLOT)
# Now let's add the distribution function
#par(new=TRUE)
#curve(1 - exp(-x/2),from = 0, to = 15, ylim = c(0,1), xlab = "", ylab = "")
# Do either this chunk or the next one.  You're probably more familiar with this
# style and the other chunk is for the adventurous.
plot(sort(x1),      # x-values are sorted version of the data
y,             # y-values equispaced between (0,1]
type = "s",    # produces a stepped line
xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="???",    # fill in your own labels for x- and y-axes
ylab="???",
col="blue")    # sets the color of the line to blue
# par() sets graphics options, new=TRUE tells R to plot on top of the existing plot
# if there is no existing plot then R will be very confused.
par(new=TRUE)
# For second plot use same values for xlim, ylim, xlab, and ylab.  Change col
# to a different value like "red"
#plot(sort(x2),y,type = "s",PARAMETERS FROM ABOVE PLOT)
# Now let's add the distribution function
#par(new=TRUE)
#curve(1 - exp(-x/2),from = 0, to = 15, ylim = c(0,1), xlab = "", ylab = "")
# Do either this chunk or the next one.  You're probably more familiar with this
# style and the other chunk is for the adventurous.
plot(sort(x2),      # x-values are sorted version of the data
y,             # y-values equispaced between (0,1]
type = "s",    # produces a stepped line
xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="???",    # fill in your own labels for x- and y-axes
ylab="???",
col="blue")    # sets the color of the line to blue
# par() sets graphics options, new=TRUE tells R to plot on top of the existing plot
# if there is no existing plot then R will be very confused.
par(new=TRUE)
# For second plot use same values for xlim, ylim, xlab, and ylab.  Change col
# to a different value like "red"
#plot(sort(x2),y,type = "s",PARAMETERS FROM ABOVE PLOT)
# Now let's add the distribution function
#par(new=TRUE)
#curve(1 - exp(-x/2),from = 0, to = 15, ylim = c(0,1), xlab = "", ylab = "")
# Do either this chunk or the next one.  You're probably more familiar with this
# style and the other chunk is for the adventurous.
plot(sort(x2),      # x-values are sorted version of the data
y,             # y-values equispaced between (0,1]
type = "s",    # produces a stepped line
xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="Days in advance the ticket was purchased",
ylab="???",
col="blue")    # sets the color of the line to blue
# par() sets graphics options, new=TRUE tells R to plot on top of the existing plot
# if there is no existing plot then R will be very confused.
par(new=TRUE)
# For second plot use same values for xlim, ylim, xlab, and ylab.  Change col
# to a different value like "red"
#plot(sort(x2),y,type = "s",PARAMETERS FROM ABOVE PLOT)
# Now let's add the distribution function
#par(new=TRUE)
#curve(1 - exp(-x/2),from = 0, to = 15, ylim = c(0,1), xlab = "", ylab = "")
# Do either this chunk or the next one.  You're probably more familiar with this
# style and the other chunk is for the adventurous.
plot(sort(x2),      # x-values are sorted version of the data
y,             # y-values equispaced between (0,1]
type = "s",    # produces a stepped line
xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="Days in advance the ticket was purchased",
ylab="Probability that the ticket was purchased this day or before",
col="blue")    # sets the color of the line to blue
# par() sets graphics options, new=TRUE tells R to plot on top of the existing plot
# if there is no existing plot then R will be very confused.
par(new=TRUE)
# For second plot use same values for xlim, ylim, xlab, and ylab.  Change col
# to a different value like "red"
#plot(sort(x2),y,type = "s",PARAMETERS FROM ABOVE PLOT)
# Now let's add the distribution function
#par(new=TRUE)
#curve(1 - exp(-x/2),from = 0, to = 15, ylim = c(0,1), xlab = "", ylab = "")
# Do either this chunk or the next one.  You're probably more familiar with this
# style and the other chunk is for the adventurous.
plot(sort(x2),      # x-values are sorted version of the data
y,             # y-values equispaced between (0,1]
type = "s",    # produces a stepped line
xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="Days in advance the ticket was purchased",
ylab="Probability that ticket was purchased this day or before",
col="blue")    # sets the color of the line to blue
# par() sets graphics options, new=TRUE tells R to plot on top of the existing plot
# if there is no existing plot then R will be very confused.
par(new=TRUE)
# For second plot use same values for xlim, ylim, xlab, and ylab.  Change col
# to a different value like "red"
#plot(sort(x2),y,type = "s",PARAMETERS FROM ABOVE PLOT)
# Now let's add the distribution function
#par(new=TRUE)
#curve(1 - exp(-x/2),from = 0, to = 15, ylim = c(0,1), xlab = "", ylab = "")
# Do either this chunk or the next one.  You're probably more familiar with this
# style and the other chunk is for the adventurous.
plot(sort(x2),      # x-values are sorted version of the data
y,             # y-values equispaced between (0,1]
type = "s",    # produces a stepped line
xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="Days in advance the ticket was purchased",
ylab="Probability that ticket was purchased this day or before",
col="blue")    # sets the color of the line to blue
# par() sets graphics options, new=TRUE tells R to plot on top of the existing plot
# if there is no existing plot then R will be very confused.
par(new=TRUE)
point(1.382)
# Do either this chunk or the next one.  You're probably more familiar with this
# style and the other chunk is for the adventurous.
plot(sort(x2),      # x-values are sorted version of the data
y,             # y-values equispaced between (0,1]
type = "s",    # produces a stepped line
xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="Days in advance the ticket was purchased",
ylab="Probability that ticket was purchased this day or before",
col="blue")    # sets the color of the line to blue
# par() sets graphics options, new=TRUE tells R to plot on top of the existing plot
# if there is no existing plot then R will be very confused.
par(new=TRUE)
point(1.382, y)
# Do either this chunk or the next one.  You're probably more familiar with this
# style and the other chunk is for the adventurous.
plot(sort(x2),      # x-values are sorted version of the data
y,             # y-values equispaced between (0,1]
type = "s",    # produces a stepped line
xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="Days in advance the ticket was purchased",
ylab="Probability that ticket was purchased this day or before",
col="blue")    # sets the color of the line to blue
# par() sets graphics options, new=TRUE tells R to plot on top of the existing plot
# if there is no existing plot then R will be very confused.
par(new=TRUE)
point(1.382, -2*log(1-1.382))
# Do either this chunk or the next one.  You're probably more familiar with this
# style and the other chunk is for the adventurous.
plot(sort(x2),      # x-values are sorted version of the data
y,             # y-values equispaced between (0,1]
type = "s",    # produces a stepped line
xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="Days in advance the ticket was purchased",
ylab="Probability that ticket was purchased this day or before",
col="blue")    # sets the color of the line to blue
# par() sets graphics options, new=TRUE tells R to plot on top of the existing plot
# if there is no existing plot then R will be very confused.
par(new=TRUE)
plot(1.382, -2*log(1-1.382))
# Do either this chunk or the next one.  You're probably more familiar with this
# style and the other chunk is for the adventurous.
plot(sort(x2),      # x-values are sorted version of the data
y,             # y-values equispaced between (0,1]
type = "s",    # produces a stepped line
xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="Days in advance the ticket was purchased",
ylab="Probability that ticket was purchased this day or before",
col="blue")    # sets the color of the line to blue
# par() sets graphics options, new=TRUE tells R to plot on top of the existing plot
# if there is no existing plot then R will be very confused.
par(new=TRUE)
# For second plot use same values for xlim, ylim, xlab, and ylab.  Change col
# to a different value like "red"
#plot(sort(x2),y,type = "s",PARAMETERS FROM ABOVE PLOT)
# Now let's add the distribution function
#par(new=TRUE)
#curve(1 - exp(-x/2),from = 0, to = 15, ylim = c(0,1), xlab = "", ylab = "")
# Do either this chunk or the next one.  You're probably more familiar with this
# style and the other chunk is for the adventurous.
plot(sort(x2),      # x-values are sorted version of the data
y,             # y-values equispaced between (0,1]
type = "s",    # produces a stepped line
xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="Days in advance the ticket was purchased (t)",
ylab="Cumulative probability of ticket purchase",
col="blue")    # sets the color of the line to blue
# par() sets graphics options, new=TRUE tells R to plot on top of the existing plot
# if there is no existing plot then R will be very confused.
par(new=TRUE)
# For second plot use same values for xlim, ylim, xlab, and ylab.  Change col
# to a different value like "red"
#plot(sort(x2),y,type = "s",PARAMETERS FROM ABOVE PLOT)
# Now let's add the distribution function
#par(new=TRUE)
#curve(1 - exp(-x/2),from = 0, to = 15, ylim = c(0,1), xlab = "", ylab = "")
# Do either this chunk or the next one.  You're probably more familiar with this
# style and the other chunk is for the adventurous.
plot(sort(x1),      # x-values are sorted version of the data
y,             # y-values equispaced between (0,1]
type = "s",    # produces a stepped line
xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="Days in advance the ticket was purchased (t)",
ylab="Cumulative probability of ticket purchase",
col="blue")    # sets the color of the line to blue
# par() sets graphics options, new=TRUE tells R to plot on top of the existing plot
# if there is no existing plot then R will be very confused.
par(new=TRUE)
# For second plot use same values for xlim, ylim, xlab, and ylab.  Change col
# to a different value like "red"
plot(sort(x2),y,type = "s",xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="Days in advance the ticket was purchased (t)",
ylab="Cumulative probability of ticket purchase",
col="blue")
# Now let's add the distribution function
#par(new=TRUE)
#curve(1 - exp(-x/2),from = 0, to = 15, ylim = c(0,1), xlab = "", ylab = "")
# Do either this chunk or the next one.  You're probably more familiar with this
# style and the other chunk is for the adventurous.
plot(sort(x1),      # x-values are sorted version of the data
y,             # y-values equispaced between (0,1]
type = "s",    # produces a stepped line
xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="Days in advance the ticket was purchased (t)",
ylab="Cumulative probability of ticket purchase",
col="blue")    # sets the color of the line to blue
# par() sets graphics options, new=TRUE tells R to plot on top of the existing plot
# if there is no existing plot then R will be very confused.
par(new=TRUE)
# For second plot use same values for xlim, ylim, xlab, and ylab.  Change col
# to a different value like "red"
plot(sort(x2),y,type = "s",xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="Days in advance the ticket was purchased (t)",
ylab="Cumulative probability of ticket purchase",
col="red")
# Now let's add the distribution function
#par(new=TRUE)
#curve(1 - exp(-x/2),from = 0, to = 15, ylim = c(0,1), xlab = "", ylab = "")
# Do either this chunk or the next one.  You're probably more familiar with this
# style and the other chunk is for the adventurous.
plot(sort(x1),      # x-values are sorted version of the data
y,             # y-values equispaced between (0,1]
type = "s",    # produces a stepped line
xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="Days in advance the ticket was purchased (t)",
ylab="Cumulative probability of ticket purchase",
col="blue")    # sets the color of the line to blue
# par() sets graphics options, new=TRUE tells R to plot on top of the existing plot
# if there is no existing plot then R will be very confused.
par(new=TRUE)
# For second plot use same values for xlim, ylim, xlab, and ylab.  Change col
# to a different value like "red"
plot(sort(x2),y,type = "s",xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="Days in advance the ticket was purchased (t)",
ylab="Cumulative probability of ticket purchase",
col="red")
# Now let's add the distribution function
par(new=TRUE)
curve(1 - exp(-x/2),from = 0, to = 15, ylim = c(0,1), xlab = "Days in advance the ticket was purchased (t)", ylab = "Cumulative probability of ticket purchase")
knitr::opts_chunk$set(echo = TRUE)
u1 <- runif(80)
x1 <- -2*log(1-u1) # apply your answer to (b) to u1
# copy over your code from above
u2 <- runif(80)
x2 <- -2*log(1-u2) # apply your answer to (b) to u2
# creates 80 equispaced values in (0,1]
y <- 1:length(x1)/length(x1)
# Do either this chunk or the next one.  You're probably more familiar with this
# style and the other chunk is for the adventurous.
plot(sort(x1),      # x-values are sorted version of the data
y,             # y-values equispaced between (0,1]
type = "s",    # produces a stepped line
xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="Days in advance the ticket was purchased (t)",
ylab="Cumulative probability of ticket purchase",
col="blue")    # sets the color of the line to blue
# par() sets graphics options, new=TRUE tells R to plot on top of the existing plot
# if there is no existing plot then R will be very confused.
par(new=TRUE)
# For second plot use same values for xlim, ylim, xlab, and ylab.  Change col
# to a different value like "red"
plot(sort(x2),y,type = "s",xlim = c(0,15), # x direction goes from 0 to 2
ylim=c(0,1),   # y direction goes from 0 to 1
xlab="Days in advance the ticket was purchased (t)",
ylab="Cumulative probability of ticket purchase",
col="red")
# Now let's add the distribution function
par(new=TRUE)
curve(1 - exp(-x/2),from = 0, to = 15, ylim = c(0,1), xlab = "Days in advance the ticket was purchased (t)", ylab = "Cumulative probability of ticket purchase")
# Try this chunk if you want a challenge and nicer looking graphs
#install.packages("ggplot2") #only needs to be run once - installs package
#library(ggplot2) # loads up ggplot2 package
# create a data frame to store our vectors in
#exp_rand_var.df <- data.frame(y = 1:length(x1)/length(x1),
#                              sx1 = sort(x1), # sorted version of x1
#                              sx2 = sort(x2)) # sorted version of x2
# and a separate data frame to store the distribution function in
# dist_function.df <- data.frame(x = seq(0,15,0.01))
# dist_function.df$y <- 1 - exp(-dist_function.df$x/2)
# https://rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf
# ggplot(data = data.frame) initializes the plot using this data frame
#ggplot(data = exp_rand_var.df) +
# geom_step draws a stepped line, mapping = aes() specifies the aesthetic,
# basically how to interpret the data in the data frame.
#  geom_step(mapping = aes(x = sx1,y = y),
#            color = "blue") +
#  geom_step(mapping = aes(x = sx2,y = y),
#            color = "red") +
#  geom_line(data = dist_function.df, mapping = aes(x = x,y = y), color = "black") +
#  xlab("???") + # insert your own labels for x- and y-axes
#  ylab("???")
