# (a) Plot should show enough of the function for the reader to see the
# reasons why Fx is a valid distribution function
# Two options for the plot:
# 1. Use plot(x,y) where you manually specify the x-values to plot at
#x <- seq()
#y <- # code up distribution function
#plot(x,y,xlab="",ylab="") # and set xlab, ylab appropriately
# 2. Use curve() and let R figure out the values of x for you
# remember to set xlab and ylab appropriately
curve(exp(-exp(-x)),from = -2, to = 5,xlab="x",ylab="probability")
# (b) Use the distribution function and solve for the quartiles
# (this is similar to one of the checkpoints), you may need a
# logarithm or two.
points_yvals <- c(0.25,0.5,0.75)
points_xvals <- -log(-log(points_yvals))
points(points_xvals,points_yvals,pch=21,bg="red")
# Here's how to make a function in R
pgumbel <- function(x)
{
gx <- exp(-exp(-x))
return(gx)
}
# set xs and call pgumbel - the p is the R shorthand for a distribution function
xs <- c(-2, -1, 0, 1, 2, 3, 4, 5)
ys <- pgumbel(xs)
data.frame(xs, ys)
# Here's how to make a function in R
pgumbel <- function(x)
{
gx <- exp(-exp(-x))
return(gx)
}
# set xs and call pgumbel - the p is the R shorthand for a distribution function
xs <- c(-2, -1, 0, 1, 2, 3, 4, 5)
F_x(x) <- pgumbel(xs)
# Here's how to make a function in R
pgumbel <- function(x)
{
gx <- exp(-exp(-x))
return(gx)
}
# set xs and call pgumbel - the p is the R shorthand for a distribution function
xs <- c(-2, -1, 0, 1, 2, 3, 4, 5)
F_x <- pgumbel(xs)
data.frame(xs, F_x
# Here's how to make a function in R
pgumbel <- function(x)
{
gx <- exp(-exp(-x))
return(gx)
}
# set xs and call pgumbel - the p is the R shorthand for a distribution function
xs <- c(-2, -1, 0, 1, 2, 3, 4, 5)
F_x <- pgumbel(xs)
data.frame(xs, F_x)
